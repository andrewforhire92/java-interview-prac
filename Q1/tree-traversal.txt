Q: What are the different types of tree traversal algorithms?

Broadly there are 4 types of tree traversals. Inorder, Preorder, Postorder, Level order.

Each traversal have their own algorithms that help achieve that type of traversal.


a) Inorder Traversal

Suppose a tree looks like this -

          4
    2           6
  1   3       5   7


Then our inorder traversal will go left left (1), up (2), right (3), up up (4), right left (5), up (6), right (7)
1 2 3 4 5 6 7

(left root right)

If a node has a child node to the left, then the left node will always come first

If a node has no child node to the left, then the current node will always be selected

If a node has a child node to the right, the current node is selected first, then the right node is checked for any child nodes to the left



b) Preorder traversal

Suppose a tree looks like this - 

          4
    2           6
  1   3       5   7

Then our preorder traversal will go current (4), left current (2), left (1), up right (3), up up right current (6), left (5), up right (7)
4 2 1 3 6 5 7

(root left right)

We select current node always

If a node has a left child, we select that node always, then continue left and selecting along the way

If a node has no more left childs, we select the right child, then go left...



c) Postorder traversal

Suppose a tree looks like this - 

          4
    2           6
  1   3       5   7

Then our postorder traversal will go left left (1), up right (3), up (2), up (4), right left (5), up right (7), up (6)

(left right root)

If a node has a child node to the left, then the left node will always come first

If a node has no child node to the left, then the node to the right will always come first, then to the left again...

If a node has no unselected child nodes remaining, then the current node will be selected


d) Level order traversal

Suppose a tree looks like this - 

          4
    2           6
  1   3       5   7

Our level order traversal will go current (4), left (2), up right (6), up left left (1), up right (3), up up right left (5), up right (7), up up left left left (null) etc.

4 2 6 1 3 5 7

Select current node (since top level always exists)

If a child node exists, go left and select node, then find all nodes of the same level, selecting the left child first always